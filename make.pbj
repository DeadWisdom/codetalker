#!/usr/bin/env python

from pbj import Builder, cmd, PBJFailed
import os
import glob
import re
import traceback

build = Builder('CodeTalker')

pyx_files = glob.glob('codetalker/pgm/cgrammar/*.pyx')
@build.file('codetalker/pgm/cgrammar/process.so', depends=pyx_files, completion=pyx_files)
def pyx(fname):
    for fname in pyx_files:
        compile_pyx(fname)

build.clean('build', 'codetalker/pgm/cgrammar/*.c', 'codetalker/pgm/cgrammar/*.so')
build.cmd('test_tokenize', ['py.test'] + glob.glob('tests/tokenize/*.py'), depends='@pyx', always=True)
build.cmd('test_parse', ['py.test'] + glob.glob('tests/parse/*.py'), depends='@pyx', always=True)
build.cmd('test', ['py.test'] + glob.glob('tests/tokenize/*.py') + glob.glob('tests/parse/*.py'), depends='@pyx', always=True)

from distutils.core import setup
from distutils.extension import Extension
from Cython.Distutils import build_ext
import sys
import os

def compile_pyx(fname):
    if fname.split('/')[-1] == '_grammar.pyx':return
    if fname.endswith('.pyx'):
        fname = fname[:-4]
    old_argv = sys.argv[:]
    sys.argv[1:] = ['build_ext','--inplace']
    setup(cmdclass = {'build_ext': build_ext},
          ext_modules = [Extension(fname.replace('/','.'), [fname + '.pyx'])])
    sys.argv = old_argv

if __name__ == '__main__':
    build.run()
